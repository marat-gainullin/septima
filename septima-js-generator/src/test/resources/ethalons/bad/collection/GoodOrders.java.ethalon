/*
 * This source file is generated automatically.
 * Please, don't edit it manually.
 */

import goods.GoodsRaw;
import orders.OrdersRaw;
import customers.CustomersRaw;
import com.septima.entities.SqlEntities;
import com.septima.model.Model;

import java.util.*;

public class GoodOrders extends Model {

    public class Good extends GoodsRaw {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (goods.getByKey().containsKey(old)) {
                    goods.getByKey().remove(old);
                    super.setId(aValue);
                    goods.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

        public Collection<Order> getOrderedGoods() {
            return ordersByGoodId.computeIfAbsent(getId(), key -> new HashSet<>());
        }

    }

    private final Entity<Long, Good> goods = new Entity<>(
            "goods/goods",
            "id",
            Good::getId,
            datum -> GoodsRaw.of(datum, Good::new),
            GoodsRaw::asMap,
            instance -> {
            },
            instance -> {
            }
    );

    public class Order extends OrdersRaw {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (orders.getByKey().containsKey(old)) {
                    orders.getByKey().remove(old);
                    super.setId(aValue);
                    orders.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

        public Good getGood() {
            return Optional.ofNullable(goods.getByKey().get(getGoodId()))
                    .orElseThrow(() -> new IllegalStateException("Unresolved reference '" + goods.getName() + " (" + getGoodId() + ")' in entity '" + orders.getName() + " (" + getId() + ")'"));
        }

        public void setGood(Good aGood) {
            setGoodId(aGood.getId());
        }

        @Override
        public void setGoodId(long aValue) {
            long old = getGoodId();
            if (old != aValue) {
                fromGroups(this, ordersByGoodId, old);
                super.setGoodId(aValue);
                toGroups(this, ordersByGoodId, aValue);
            }
        }

    }

    private Map<Long, Collection<Order>> ordersByGoodId = new HashMap<>();

    private final Entity<Long, Order> orders = new Entity<>(
            "orders/orders",
            "id",
            Order::getId,
            datum -> OrdersRaw.of(datum, Order::new),
            OrdersRaw::asMap,
            instance -> {
                toGroups(instance, ordersByGoodId, instance.getGoodId());
            },
            instance -> {
                fromGroups(instance, ordersByGoodId, instance.getGoodId());
            }
    );

    public class Customer extends CustomersRaw {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (customers.getByKey().containsKey(old)) {
                    customers.getByKey().remove(old);
                    super.setId(aValue);
                    customers.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

    }

    private final Entity<Long, Customer> customers = new Entity<>(
            "customers/customers",
            "id",
            Customer::getId,
            datum -> CustomersRaw.of(datum, Customer::new),
            CustomersRaw::asMap,
            instance -> {
            },
            instance -> {
            }
    );

    public class Seller extends CustomersRaw {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (sellers.getByKey().containsKey(old)) {
                    sellers.getByKey().remove(old);
                    super.setId(aValue);
                    sellers.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

    }

    private final Entity<Long, Seller> sellers = new Entity<>(
            "customers/customers",
            "id",
            Seller::getId,
            datum -> CustomersRaw.of(datum, Seller::new),
            CustomersRaw::asMap,
            instance -> {
            },
            instance -> {
            }
    );

    public GoodOrders(SqlEntities aEntities) {
        super(aEntities);
    }

    public Entity<Long, Good> getGoods() {
        return goods;
    }

    public Entity<Long, Order> getOrders() {
        return orders;
    }

    public Entity<Long, Customer> getCustomers() {
        return customers;
    }

    public Entity<Long, Seller> getSellers() {
        return sellers;
    }

    public Good newGood() {
        return new Good();
    }

    public Order newOrder() {
        return new Order();
    }

    public Customer newCustomer() {
        return new Customer();
    }

    public Seller newSeller() {
        return new Seller();
    }

}
