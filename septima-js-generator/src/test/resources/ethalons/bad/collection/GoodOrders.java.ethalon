/*
 * This source file is generated automatically.
 * Please, don't edit it manually.
 */

import goods.GoodsRow;
import orders.OrdersRow;
import customers.CustomersRow;
import com.septima.entities.SqlEntities;
import com.septima.model.Model;

import java.util.*;
import java.util.concurrent.CompletableFuture;

public class GoodOrders extends Model {

    public class Good extends GoodsRow {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (goods.getByKey().containsKey(old)) {
                    goods.getByKey().remove(old);
                    super.setId(aValue);
                    goods.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

        public Collection<Order> getOrderedGoods() {
            return ordersByGoodId.computeIfAbsent(getId(), key -> new HashSet<>());
        }

    }

    public class GoodEntity extends Entity<Long, Good> {
        public GoodEntity(){
            super(
                "goods/goods",
                "id",
                Good::getId,
                datum -> GoodsRow.of(datum, Good::new),
                GoodsRow::asMap,
                instance -> {
                },
                instance -> {
                }
            );
        }

        public CompletableFuture<Map<Long, Good>> query(

        ) {
            return query(map(

            ));
        }
    }

    private final GoodEntity goods = new GoodEntity();
    public class Order extends OrdersRow {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (orders.getByKey().containsKey(old)) {
                    orders.getByKey().remove(old);
                    super.setId(aValue);
                    orders.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

        public Good getGood() {
            return Optional.ofNullable(goods.getByKey().get(getGoodId()))
                    .orElseThrow(() -> new IllegalStateException("Unresolved reference '" + goods.getName() + " (" + getGoodId() + ")' in entity '" + orders.getName() + " (" + getId() + ")'"));
        }

        public void setGood(Good aGood) {
            setGoodId(aGood.getId());
        }

        @Override
        public void setGoodId(long aValue) {
            long old = getGoodId();
            if (old != aValue) {
                fromGroups(this, ordersByGoodId, old);
                super.setGoodId(aValue);
                toGroups(this, ordersByGoodId, aValue);
            }
        }

    }

    private Map<Long, Collection<Order>> ordersByGoodId = new HashMap<>();

    public class OrderEntity extends Entity<Long, Order> {
        public OrderEntity(){
            super(
                "orders/orders",
                "id",
                Order::getId,
                datum -> OrdersRow.of(datum, Order::new),
                OrdersRow::asMap,
                instance -> {
                toGroups(instance, ordersByGoodId, instance.getGoodId());
                },
                instance -> {
                fromGroups(instance, ordersByGoodId, instance.getGoodId());
                }
            );
        }

        public CompletableFuture<Map<Long, Order>> query(

        ) {
            return query(map(

            ));
        }
    }

    private final OrderEntity orders = new OrderEntity();
    public class Customer extends CustomersRow {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (customers.getByKey().containsKey(old)) {
                    customers.getByKey().remove(old);
                    super.setId(aValue);
                    customers.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

    }

    public class CustomerEntity extends Entity<Long, Customer> {
        public CustomerEntity(){
            super(
                "customers/customers",
                "id",
                Customer::getId,
                datum -> CustomersRow.of(datum, Customer::new),
                CustomersRow::asMap,
                instance -> {
                },
                instance -> {
                }
            );
        }

        public CompletableFuture<Map<Long, Customer>> query(

        ) {
            return query(map(

            ));
        }
    }

    private final CustomerEntity customers = new CustomerEntity();
    public class Seller extends CustomersRow {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (sellers.getByKey().containsKey(old)) {
                    sellers.getByKey().remove(old);
                    super.setId(aValue);
                    sellers.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

    }

    public class SellerEntity extends Entity<Long, Seller> {
        public SellerEntity(){
            super(
                "customers/customers",
                "id",
                Seller::getId,
                datum -> CustomersRow.of(datum, Seller::new),
                CustomersRow::asMap,
                instance -> {
                },
                instance -> {
                }
            );
        }

        public CompletableFuture<Map<Long, Seller>> query(

        ) {
            return query(map(

            ));
        }
    }

    private final SellerEntity sellers = new SellerEntity();
    public GoodOrders(SqlEntities aEntities) {
        super(aEntities);
    }

    public GoodEntity getGoods() {
        return goods;
    }

    public OrderEntity getOrders() {
        return orders;
    }

    public CustomerEntity getCustomers() {
        return customers;
    }

    public SellerEntity getSellers() {
        return sellers;
    }

    public Good newGood() {
        return new Good();
    }

    public Order newOrder() {
        return new Order();
    }

    public Customer newCustomer() {
        return new Customer();
    }

    public Seller newSeller() {
        return new Seller();
    }

}
