/*
 * This source file is generated automatically.
 * Please, don't edit it manually.
 */

import com.septima.entities.SqlEntities;
import com.septima.model.Model;

import java.util.*;
import java.util.concurrent.CompletableFuture;

public class Goods extends Model {

    public class Hierarchy extends GoodsHierarchyRow {

        @Override
        public void setId(long aValue) {
            long old = getId();
            if (old != aValue) {
                if (hierarchy.getByKey().containsKey(old)) {
                    hierarchy.getByKey().remove(old);
                    super.setId(aValue);
                    hierarchy.getByKey().put(aValue, this);
                } else {
                    super.setId(aValue);
                }
            }
        }

        public Hierarchy getParent() {
            if (getParentId() != null) {
                return Optional.ofNullable(hierarchy.getByKey().get(getParentId()))
                        .orElseThrow(() -> new IllegalStateException("Unresolved reference '" + hierarchy.getName() + " (" + getParentId() + ")' in entity '" + hierarchy.getName() + " (" + getId() + ")'"));
            } else {
                return null;
            }
        }

        public void setParent(Hierarchy aHierarchy) {
            setParentId(aHierarchy != null ? aHierarchy.getId() : null);
        }

        @Override
        public void setParentId(Long aValue) {
            Long old = getParentId();
            if (old != null ? !old.equals(aValue) : aValue != null) {
                if (old != null) {
                    fromGroups(this, hierarchyByParentId, old);
                }
                super.setParentId(aValue);
                if (aValue != null) {
                    toGroups(this, hierarchyByParentId, aValue);
                }
            }
        }

        public Collection<Hierarchy> getChildren() {
            return hierarchyByParentId.computeIfAbsent(getId(), key -> new HashSet<>());
        }

    }

    private Map<Long, Collection<Hierarchy>> hierarchyByParentId = new HashMap<>();

    public class HierarchyEntity extends Entity<Long, Hierarchy> {
        public HierarchyEntity(){
            super(
                "goods-hierarchy",
                "id",
                Hierarchy::getId,
                datum -> GoodsHierarchyRow.of(datum, Hierarchy::new),
                GoodsHierarchyRow::asMap,
                instance -> {
                toGroups(instance, hierarchyByParentId, instance.getParentId());
                },
                instance -> {
                fromGroups(instance, hierarchyByParentId, instance.getParentId());
                }
            );
        }

        public CompletableFuture<Map<Long, Hierarchy>> query(

        ) {
            return query(map(

            ));
        }
    }

    private final HierarchyEntity hierarchy = new HierarchyEntity();
    public Goods(SqlEntities aEntities) {
        super(aEntities);
    }

    public HierarchyEntity getHierarchy() {
        return hierarchy;
    }

    public Hierarchy newHierarchy() {
        return new Hierarchy();
    }

}
